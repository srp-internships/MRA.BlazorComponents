@inherits MudButton

@if (_isFunctionRunning)
{
    <MudButton StartIcon="@StartIcon" EndIcon="@EndIcon" IconColor="@IconColor" IconSize="@IconSize"
               IconClass="@IconClass" Color="@Color" Size="@Size" Variant="@Variant" FullWidth="@FullWidth"
               UserAttributes="@UserAttributes" Style="@Style" Disabled="@Disabled" ButtonType="@ButtonType"
               Class="@Class" DisableElevation="@DisableElevation" DisableRipple="@DisableRipple" Tag="@Tag"
               ClickPropagation="@ClickPropagation" HtmlTag="@HtmlTag" Target="@Target" Rel="@Rel">
        <MudProgressCircular Indeterminate="true" Size="Size.Small"/>
    </MudButton>
}
else
{
    <MudButton StartIcon="@StartIcon" EndIcon="@EndIcon" IconColor="@IconColor" IconSize="@IconSize"
               IconClass="@IconClass" Color="@Color" Size="@Size" Variant="@Variant" FullWidth="@FullWidth"
               UserAttributes="@UserAttributes" Style="@Style" Disabled="@Disabled" ButtonType="@ButtonType"
               Class="@Class" DisableElevation="@DisableElevation" DisableRipple="@DisableRipple" Tag="@Tag"
               ClickPropagation="@ClickPropagation" HtmlTag="@HtmlTag" Target="@Target" Rel="@Rel"
               OnClick="@StartFunction">
        @ChildContent
    </MudButton>
}

@code {


    private bool _isFunctionRunning;

    private async Task StartFunction()
    {
        try
        {
            _isFunctionRunning = true;
            StateHasChanged();
            await OnClick.InvokeAsync(null);
        }
        catch (Exception)
        {
            // ignored
        }
        finally
        {
            _isFunctionRunning = false;
            StateHasChanged();
        }
    }

}