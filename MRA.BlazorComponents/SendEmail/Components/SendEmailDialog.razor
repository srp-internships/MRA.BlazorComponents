@using Blazored.TextEditor
@using Microsoft.Extensions.Configuration
@using MRA.BlazorComponents.Configuration
@using MRA.BlazorComponents.HttpClient.Services
@using MRA.BlazorComponents.SendEmail.Commands
@using MRA.BlazorComponents.SendEmail.Responses
@using MRA.BlazorComponents.Snackbar.Extensions
@using System.Net
@inject ISnackbar Snackbar
@inject IConfiguration Configuration
@inject IHttpClientService HttpClientService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Send" Class="mr-3 mb-n1"/>
            Send email
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudCard>
            <MudCardHeader>
                <MudSelect T="string" Label="Template" AnchorOrigin="Origin.BottomCenter" @bind-Value="@_selectedTemplate">
                    @if (_emailTemplateNames != null)
                    {
                        @foreach (var templateName in _emailTemplateNames)
                        {
                            <MudSelectItem Value="templateName.Slug">
                                @templateName.Name
                            </MudSelectItem>
                        }
                    }

                </MudSelect>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" OnClick="@(async () => await TemplateSelect())">Load</MudButton>
            </MudCardHeader>
            <MudForm Model="@_model" @ref="@_form" ValidationDelay="0">
                <MudCardContent>
                    <br>
                    <MudTextField @bind-Value="_model.Subject"
                                  For="@(() => _model.Subject)"
                                  Immediate="true"
                                  Label="Subject"/>
                    <label>Text:</label>
                    <br>
                    <BlazoredTextEditor @ref="@_quillHtml">
                        <ToolbarContent>
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-size">
                                    <option value="small"></option>
                                    <option selected=""></option>
                                    <option value="large"></option>
                                    <option value="huge"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>

                        </EditorContent>
                    </BlazoredTextEditor>
                    <MudInput @bind-Value="@_imageLinkToInsertToEditor"/>
                    <ProgressTaskButton Variant="Variant.Filled" Color="Color.Primary"
                                        Function="InsertImage">
                        Insert image
                    </ProgressTaskButton>
                </MudCardContent>
            </MudForm>
            <MudCardActions>

            </MudCardActions>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => MudDialog.Cancel())">Cancel</MudButton>
        <ProgressTaskButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Function="@(async () => await Submit())">Send</ProgressTaskButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public required string Email { get; set; }

    
    private MudForm _form = null!;
    private BlazoredTextEditor _quillHtml = null!;
    private string _imageLinkToInsertToEditor = null!;

    private List<EmailTemplateNamesResponse>? _emailTemplateNames;
    private string _selectedTemplate = "";

    public async void InsertImage()
    {
        if (!string.IsNullOrEmpty(_imageLinkToInsertToEditor))
        {
            await _quillHtml.InsertImage(_imageLinkToInsertToEditor);
            StateHasChanged();
        }
    }

    private readonly SendEmailCommand _model = new()
    {
        Receivers = [],
        Subject = "",
        Text = ""
    };

    private async Task Submit()
    {
        _model.Receivers = [Email];
        var html = await _quillHtml.GetHTML();
        _model.Text = html;
        var postResult =
            await HttpClientService.PostAsJsonAsync(Configuration.GetIdentityUrl("user/sendEmail"), _model);
        Snackbar.ShowIfError(postResult, "Server is not responding, please try again later",
            "Email was successfully sent");
    }

    protected override async Task OnInitializedAsync()
    {
        var templatesNamesResponse = await HttpClientService.GetFromJsonAsync<List<EmailTemplateNamesResponse>>(Configuration.GetIdentityUrl("emailTemplates"));
        Snackbar.ShowIfError(templatesNamesResponse, "Server is not responding, please try again later");
        if (templatesNamesResponse.HttpStatusCode == HttpStatusCode.OK)
        {
            _emailTemplateNames = templatesNamesResponse.Result;
        }
    }

    private async Task TemplateSelect()
    {
        if (string.IsNullOrWhiteSpace(_selectedTemplate))
            return;
        var templateResponse = await HttpClientService.GetFromJsonAsync<EmailTemplateResponse>(Configuration.GetIdentityUrl($"emailTemplates/{_selectedTemplate}"));
        Snackbar.ShowIfError(templateResponse, "Server is not responding, please try again later");
        if (templateResponse.HttpStatusCode == HttpStatusCode.OK)
        {
            _model.Subject = templateResponse.Result!.Subject;
            await _quillHtml.LoadHTMLContent(templateResponse.Result.Text);
        }
    }

}